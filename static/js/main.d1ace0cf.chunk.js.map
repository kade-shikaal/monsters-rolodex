{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","src","concat","monster","id","alt","name","email","CardList","monsters","map","card_component_Card","key","SearchBox","_ref","placeholder","handleChange","type","onChange","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","searchField","_this2","fetch","then","response","json","users","setState","_this3","_this$state","filteredMonsters","filter","toLowerCase","includes","search_box_component_SearchBox","e","target","value","card_list_component_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oTAGaA,qBAAO,SAAAC,GAAK,OACvBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,OACEE,IAAG,wBAAAC,OACDN,EAAMO,QAAQC,GADb,0BAGHC,IAAI,YAENR,EAAAC,EAAAC,cAAA,UAAKH,EAAMO,QAAQG,MACnBT,EAAAC,EAAAC,cAAA,SAAIH,EAAMO,QAAQI,UCPTC,EAAW,SAAAZ,GAAK,OAC3BC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACZJ,EAAMa,SAASC,IAAI,SAAAP,GAAO,OACzBN,EAAAC,EAAAC,cAACY,EAAD,CAAMC,IAAKT,EAAQC,GAAID,QAASA,QCLzBU,SAAY,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,YAAaC,EAAhBF,EAAgBE,aAAhB,OACvBnB,EAAAC,EAAAC,cAAA,SACEC,UAAU,SACViB,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCsCCG,cAvCb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXlB,SAAU,GACVmB,YAAa,IAJHR,mFAQM,IAAAS,EAAAN,KAElBO,MAAM,8CACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAK,OAAIL,EAAKM,SAAS,CAAE1B,SAAUyB,uCAGpC,IAAAE,EAAAb,KAAAc,EAI2Bd,KAAKI,MAA/BlB,EAJD4B,EAIC5B,SAAUmB,EAJXS,EAIWT,YACZU,EAAmB7B,EAAS8B,OAAO,SAAApC,GAAO,OAC9CA,EAAQG,KAAKkC,cAAcC,SAASb,EAAYY,iBAElD,OACE3C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAC2C,EAAD,CACE3B,YAAY,kBACZC,aAAc,SAAA2B,GAAC,OACbP,EAAKD,SAAS,CAAEP,YAAae,EAAEC,OAAOC,WAI1ChD,EAAAC,EAAAC,cAAC+C,EAAD,CAAUrC,SAAU6B,YAlCVS,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOzD,EAAAC,EAAAC,cAACwD,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,KAAK,SAAA8B,GACjCA,EAAaC","file":"static/js/main.d1ace0cf.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./card.styles.css\";\r\n\r\nexport const Card = props => (\r\n  <div className=\"card-container\">\r\n    <img\r\n      src={`https://robohash.org/${\r\n        props.monster.id\r\n      }?set=set2&size=180x180`} /*BackTicks were used*/\r\n      alt=\"monster\"\r\n    />\r\n    <h2>{props.monster.name}</h2>\r\n    <p>{props.monster.email}</p>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport \"./card-list.styles.css\";\r\nimport { Card } from \"../card/card.component\";\r\n\r\n//props is the parameter we get from the functional compoonent\r\nexport const CardList = props => (\r\n  <div className=\"card-list\">\r\n    {props.monsters.map(monster => (\r\n      <Card key={monster.id} monster={monster} />\r\n    ))}\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport \"./search-box.styles.css\";\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n  <input\r\n    className=\"search\"\r\n    type=\"search\"\r\n    placeholder={placeholder} //Dynamic placeholder\r\n    onChange={handleChange}\r\n  />\r\n);\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { CardList } from \"./components/card-list/card-list.component.jsx\";\nimport { SearchBox } from \"./components/search-box/search-box.component.jsx\";\n\n/*.1*/\nclass App extends Component {\n  constructor() {\n    super(); // Calls the constructor method on the Component class\n    this.state = {\n      monsters: [], //the default value\n      searchField: \"\"\n    };\n  }\n  /*.2*/\n  componentDidMount() {\n    /*.3*/\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response => response.json())\n      .then(users => this.setState({ monsters: users }));\n  }\n\n  render() {\n    /*Destructuring\n    Same as saying : const monsters = this.state.monsters*/\n\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox\n          placeholder=\"Search monsters\"\n          handleChange={e =>\n            this.setState({ searchField: e.target.value })\n          } /*anonymous function || the this keyword is set to the context of the class component || the this context is bound inside method because we called super() it extends functionality of component*/\n        />\n        {/*.4*/}\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n/****************Comments****************/\n/*.1*/\n//by using a class that extends Component instead of a function you get access to the state\n\n/*You are not allowed to modify state without calling setState because react intercepts from the DOM and updates the state and rerednders the component*/\n\n//state: JS object with properties that can be accesed anytime in class\n\n/*.2*/\n//Life cycle methods are methods that get called at different stages of when the component gets rendered\n\n/*.3*/\n//wait for component to mount || fetch all these users || update states monsters with users\n\n/*.4*/\n/*Map() returns the return of whatever function passed to it, iterated over ever element in the array*/\n\n/*Map() returns the return of whatever function passed to it, iterated over ever element in the array*/\n\n/*mapped names are going to be the children of the card-list.components in between the div*/\n\n/*This Keyword*/\n/* JS does not set the scope of 'this' on functions, have to explicitly set the context of 'this' */\n\n/* you can bind the context of the function using : \n\nthis.handleChange = this.handleChange.bind(this) in the constructor || .bind() is a method that return a new function where the context of this is set to whatever is passed to it e.g. 'this' \n\nES6 arrow functions automatically binds this to where the arrow function was defined originally || context is the app.js || lexical scoping - variable defined outside a function can be accessible inside another function defined\n*/\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\n//The React library allows us to write the JSX\nimport ReactDOM from \"react-dom\";\n//Allows for interaction with the DOM\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n//replaces the root div in the public body with the <App/> import from the App.js src file\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}